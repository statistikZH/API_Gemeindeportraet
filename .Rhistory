reticulate::repl_python()
url="https://www.web.statistik.zh.ch/ogd/daten/zhweb.json"
rjson::fromJSON(url)
library(rjson)
url="https://www.web.statistik.zh.ch/ogd/daten/zhweb.json"
data = rjson::fromJSON(url)
print(data)
library(jsonlite)
data = jsonlite::fromJSON(fileurl)
data <- jsonlite::fromJSON(fileurl)
data <- jsonlite::fromJSON(url)
print(data)
View(data)
data <- jsonlite::fromJSON(url, simplifyDataFrame = T)
View(data)
View(data[["dataset"]][["landingPage"]])
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>% as.data.frame
library(dplyr)
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>% as.data.frame
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>%
as.data.frame %>%
dplyr::filter(dataset.landingpage == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html")
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>%
as.data.frame %>%
dplyr::filter(`dataset.landingpage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html")
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>%
as.data.frame %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html")
gpzh_only <- data %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html")
View(gpzh_only)
View(gpzh_only[[16]][[1]])
gpzh_only <- data %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html") %>%
dplyr::mutate(download_url = data[["dataset"]][["landingPage"]][["downloadUrl"]])
View(gpzh_only)
View(gpzh_only[[16]][[1]])
gpzh_only <- data %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html") %>%
dplyr::mutate(download_url = gpzh[[16]][[1]][["downloadUrl"]])
gpzh_only <- data %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html") %>%
dplyr::mutate(download_url = .[[16]][[1]][["downloadUrl"]])
View(gpzh_only)
View(gpzh_only[[16]][[2]])
gpzh_datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
View(gpzh_only)
metadata <- gpzh_only %>% as.data.frame(do.call(cbind, distribution))
metadata <- gpzh_only %>% as.data.frame(do.call(cbind, dataset.distribution))
names(gpzh_only)
metadata <- gpzh_only %>% as.data.frame(do.call(cbind, "dataset.distribution"))
metadata <- gpzh_only %>% as.data.frame(do.call(cbind, dataset.distribution))
View(gpzh_datasets)
metadaten <- gpzh_only$dataset.distribution
View(metadaten)
metadata <- as.data.frame(do.call(cbind, gpzh_only$dataset.distribution))
View(metadata)
metadata <- as.data.frame(do.call(rbind, gpzh_only$dataset.distribution))
View(metadata)
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title")
View(gpzh_full_list)
metadata <- as.data.frame(do.call(rbind, gpzh_only$dataset.distribution)) %>%
dplyr::select("id" = ktzhDistId,
title,
"download_url" = downloadUrl,
format)
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title")
View(gpzh_full_list)
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title") %>%
dplyr::relocate(.id, .before = "title")
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title") %>%
dplyr::relocate(id, .before = "title")
View(gpzh_full_list)
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title") %>%
dplyr::relocate(c(id, theme), .before = "title")
View(gpzh_full_list)
# Save the full list to a CSV file
utils::write.table(gpzh_full_list, file = "output/gpzh_dataset_overview.csv", fileEncoding = "UTF-8", row.names = FALSE)
View(gpzh_full_list)
# Save the full list to a CSV file
utils::write.csv(gpzh_full_list, file = "output/gpzh_dataset_overview.csv", fileEncoding = "UTF-8", row.names = FALSE)
str(gpzh_full_list)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = do.call(rbind, gpzh_only$dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = do.call(cbind, gpzh_only$dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme[[1]],
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
) %>%
as.data.frame()
str(datasets)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = unnest(dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
?unnest
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = ctidyr::unnest(dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = tidyr::unnest(dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = tidyr::unnest(gpzh_only.dataset.theme),
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
tidyr::unnest(gpzh_only.dataset.theme)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
tidyr::unnest(dataset.theme)
View(datasets)
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Singling out the dataset information from the json
datasets <- gpzh_only %>%
tidyr::unnest(dataset.theme) %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
View(datasets)
str(datasets)
# Merging the dataset information with the additional distribution information
gpzh_full_list <- datasets %>%
dplyr::left_join(metadata, by = "title") %>%
dplyr::relocate(c(id, theme), .before = "title")
# Save the full list to a CSV file
utils::write.csv(gpzh_full_list, file = "output/gpzh_dataset_overview.csv", fileEncoding = "UTF-8", row.names = FALSE)
# This script describes step by step how the JSON can be filtered and
# relevant information, such as the download URL of a distribution, can be extracted.
library(jsonlite)
library(dplyr)
# Access url for the json file with all records from the data catalogue
url="https://www.web.statistik.zh.ch/ogd/daten/zhweb.json"
# Retrieve the json file and convert it into a data frame
data <- jsonlite::fromJSON(url, simplifyDataFrame = T) %>%
as.data.frame
# Extract all datasets from the municipality portrait
# Identifier is the dataset landinpage
gpzh_only <- data %>%
dplyr::filter(`dataset.landingPage` == "https://www.zh.ch/de/politik-staat/gemeinden/gemeindeportraet.html")
# Find the record information from the json file (title, description, etc.)
dataset_data <- gpzh_only %>%
tidyr::unnest(dataset.theme) %>%
dplyr::select(title = dataset.title,
description = dataset.description,
theme = dataset.theme,
start_date = dataset.startDate,
end_date =dataset.endDate
)
# Retrieve further information on the distribution stored on the second level of the nested json
distibution_data <- as.data.frame(do.call(rbind, gpzh_only$dataset.distribution)) %>%
dplyr::select("id" = ktzhDistId,
title,
"download_url" = downloadUrl,
format)
# Merging the dataset information with the additional distribution information
gpzh_full_list <- dataset_data %>%
dplyr::left_join(distibution_data, by = "title") %>%
dplyr::relocate(c(id, theme), .before = "title")
str(gpzh_full_list)
# Save the full list to a CSV file
utils::write.csv(gpzh_full_list, file = "output/gpzh_dataset_overview.csv", fileEncoding = "UTF-8", row.names = FALSE)
usethis::edit_r_environ()
